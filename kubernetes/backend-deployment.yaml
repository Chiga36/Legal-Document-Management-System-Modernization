apiVersion: apps/v1
kind: Deployment
metadata:
  name: legal-dms-backend
  namespace: legal-dms
  labels:
    app: legal-dms
    component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: legal-dms
      component: backend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: legal-dms
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: legal-dms-backend
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: ${DOCKER_REGISTRY}/legal-dms-backend:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: LOG_LEVEL
          value: "info"
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: legal-dms-secrets
              key: mongodb-uri
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: legal-dms-secrets
              key: jwt-secret
        - name: S3_BUCKET
          valueFrom:
            configMapKeyRef:
              name: legal-dms-config
              key: s3-bucket
        - name: S3_REGION
          valueFrom:
            configMapKeyRef:
              name: legal-dms-config
              key: s3-region
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: legal-dms-secrets
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: legal-dms-secrets
              key: aws-secret-access-key
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /usr/src/app/logs
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: logs-volume
        persistentVolumeClaim:
          claimName: legal-dms-logs-pvc
      imagePullSecrets:
      - name: docker-registry-secret
---
apiVersion: v1
kind: Service
metadata:
  name: legal-dms-backend
  namespace: legal-dms
  labels:
    app: legal-dms
    component: backend
spec:
  selector:
    app: legal-dms
    component: backend
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: legal-dms-backend-hpa
  namespace: legal-dms
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: legal-dms-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80